
// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require('Verifier');
const proof = require('./../zokrates/code/square/proof.json');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
contract('Verifier', accounts => {

    const account = accounts[0];

    describe('Verification', async () => {

        beforeEach(async () => {
            this.contract = await Verifier.new({ from: account });
        });

        it('should pass verification with correct proof', async () => {
            let result = await this.contract.verifyTx.call(
                proof.proof.a,
                proof.proof.b,
                proof.proof.c,
                proof.inputs
            );
            assert.equal(result, true, "Verification did not pass as expected");
        });

        it('should fail verification with incorrect proof', async () => {
            let result = await this.contract.verifyTx.call(
                proof.proof.a,
                proof.proof.b,
                proof.proof.c,
                [6, 9]
            );
            assert.equal(result, false, "Verification passed when expected to fail");

        });
    });
});
